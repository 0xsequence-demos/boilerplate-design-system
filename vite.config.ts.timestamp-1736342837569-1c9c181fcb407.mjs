// vite.config.ts
import { defineConfig } from "file:///Users/matt/Uncredited/horizon/0xsequence/boilerplate-design-system/node_modules/.pnpm/vite@5.4.11/node_modules/vite/dist/node/index.js";
import react from "file:///Users/matt/Uncredited/horizon/0xsequence/boilerplate-design-system/node_modules/.pnpm/@vitejs+plugin-react@4.3.3_vite@5.4.11/node_modules/@vitejs/plugin-react/dist/index.mjs";
import dts from "file:///Users/matt/Uncredited/horizon/0xsequence/boilerplate-design-system/node_modules/.pnpm/vite-plugin-dts@4.3.0_rollup@4.27.3_typescript@5.6.3_vite@5.4.11/node_modules/vite-plugin-dts/dist/index.mjs";
import tsconfigPaths from "file:///Users/matt/Uncredited/horizon/0xsequence/boilerplate-design-system/node_modules/.pnpm/vite-tsconfig-paths@5.1.3_typescript@5.6.3_vite@5.4.11/node_modules/vite-tsconfig-paths/dist/index.js";

// package.json
var peerDependencies = {
  react: "^18",
  "react-dom": "^18",
  sonner: "^1.7.1"
};

// vite.config.ts
var vite_config_default = defineConfig({
  plugins: [
    react(),
    tsconfigPaths(),
    dts({
      exclude: ["node_modules", "tests", "**/*.stories.tsx", "**/*.test.tsx"],
      outDir: "dist"
    })
  ],
  build: {
    lib: {
      entry: "./src/index.ts",
      name: "boilerplate-design-system",
      formats: ["es", "umd"],
      fileName: (format) => `index.${format}.js`
    },
    rollupOptions: {
      output: {
        dir: "dist"
        // Output directory
      },
      external: Object.keys(peerDependencies),
      plugins: []
    },
    watch: {
      include: "src/**"
      // Watch for changes in the source directory
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1VzZXJzL21hdHQvVW5jcmVkaXRlZC9ob3Jpem9uLzB4c2VxdWVuY2UvYm9pbGVycGxhdGUtZGVzaWduLXN5c3RlbVwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiL1VzZXJzL21hdHQvVW5jcmVkaXRlZC9ob3Jpem9uLzB4c2VxdWVuY2UvYm9pbGVycGxhdGUtZGVzaWduLXN5c3RlbS92aXRlLmNvbmZpZy50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vVXNlcnMvbWF0dC9VbmNyZWRpdGVkL2hvcml6b24vMHhzZXF1ZW5jZS9ib2lsZXJwbGF0ZS1kZXNpZ24tc3lzdGVtL3ZpdGUuY29uZmlnLnRzXCI7aW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSBcInZpdGVcIjtcbmltcG9ydCByZWFjdCBmcm9tIFwiQHZpdGVqcy9wbHVnaW4tcmVhY3RcIjtcblxuaW1wb3J0IGR0cyBmcm9tIFwidml0ZS1wbHVnaW4tZHRzXCI7XG5pbXBvcnQgdHNjb25maWdQYXRocyBmcm9tIFwidml0ZS10c2NvbmZpZy1wYXRoc1wiO1xuaW1wb3J0IHsgcGVlckRlcGVuZGVuY2llcyB9IGZyb20gXCIuL3BhY2thZ2UuanNvblwiO1xuXG4vLyBodHRwczovL3ZpdGUuZGV2L2NvbmZpZy9cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XG4gIHBsdWdpbnM6IFtcbiAgICByZWFjdCgpLFxuICAgIHRzY29uZmlnUGF0aHMoKSxcbiAgICBkdHMoe1xuICAgICAgZXhjbHVkZTogW1wibm9kZV9tb2R1bGVzXCIsIFwidGVzdHNcIiwgXCIqKi8qLnN0b3JpZXMudHN4XCIsIFwiKiovKi50ZXN0LnRzeFwiXSxcbiAgICAgIG91dERpcjogXCJkaXN0XCIsXG4gICAgfSksXG4gIF0sXG4gIGJ1aWxkOiB7XG4gICAgbGliOiB7XG4gICAgICBlbnRyeTogXCIuL3NyYy9pbmRleC50c1wiLFxuICAgICAgbmFtZTogXCJib2lsZXJwbGF0ZS1kZXNpZ24tc3lzdGVtXCIsXG4gICAgICBmb3JtYXRzOiBbXCJlc1wiLCBcInVtZFwiXSxcbiAgICAgIGZpbGVOYW1lOiAoZm9ybWF0KSA9PiBgaW5kZXguJHtmb3JtYXR9LmpzYCxcbiAgICB9LFxuICAgIHJvbGx1cE9wdGlvbnM6IHtcbiAgICAgIG91dHB1dDoge1xuICAgICAgICBkaXI6IFwiZGlzdFwiLCAvLyBPdXRwdXQgZGlyZWN0b3J5XG4gICAgICB9LFxuICAgICAgZXh0ZXJuYWw6IE9iamVjdC5rZXlzKHBlZXJEZXBlbmRlbmNpZXMpLFxuICAgICAgcGx1Z2luczogW10sXG4gICAgfSxcbiAgICB3YXRjaDoge1xuICAgICAgaW5jbHVkZTogXCJzcmMvKipcIiwgLy8gV2F0Y2ggZm9yIGNoYW5nZXMgaW4gdGhlIHNvdXJjZSBkaXJlY3RvcnlcbiAgICB9LFxuICB9LFxufSk7XG4iLCAie1xuICBcIm5hbWVcIjogXCJib2lsZXJwbGF0ZS1kZXNpZ24tc3lzdGVtXCIsXG4gIFwicHJpdmF0ZVwiOiB0cnVlLFxuICBcInZlcnNpb25cIjogXCIwLjAuMFwiLFxuICBcInR5cGVcIjogXCJtb2R1bGVcIixcbiAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICBcInNjcmlwdHNcIjoge1xuICAgIFwiZGV2XCI6IFwidml0ZVwiLFxuICAgIFwiYnVpbGRcIjogXCJ2aXRlIGJ1aWxkXCIsXG4gICAgXCJsaW50XCI6IFwiZXNsaW50IC5cIixcbiAgICBcInByZXZpZXdcIjogXCJ2aXRlIHByZXZpZXdcIixcbiAgICBcImJ1aWxkLXN2Z1wiOiBcIm5weCBAc3Znci9jbGkgLS10eXBlc2NyaXB0IC0tbm8tZGltZW5zaW9ucyAtLXN2Zy1wcm9wcyByb2xlPWltZyAtLW91dC1kaXIgc3JjL2NvbXBvbmVudHMvc3ZnIC0tIHN2Z1wiXG4gIH0sXG4gIFwibWFpblwiOiBcImRpc3QvaW5kZXgudW1kLmpzXCIsXG4gIFwibW9kdWxlXCI6IFwiZGlzdC9pbmRleC5lcy5qc1wiLFxuICBcInR5cGVzXCI6IFwiZGlzdC9pbmRleC5kLnRzXCIsXG4gIFwiZXhwb3J0c1wiOiB7XG4gICAgXCIuXCI6IHtcbiAgICAgIFwiaW1wb3J0XCI6IFwiLi9kaXN0L2luZGV4LmVzLmpzXCIsXG4gICAgICBcInJlcXVpcmVcIjogXCIuL2Rpc3QvaW5kZXgudW1kLmpzXCIsXG4gICAgICBcImRlZmF1bHRcIjogXCIuL2Rpc3QvaW5kZXguZXMuanNcIixcbiAgICAgIFwidHlwZXNcIjogXCIuL2Rpc3QvaW5kZXguZC50c1wiXG4gICAgfSxcbiAgICBcIi4vc3R5bGVzLmNzc1wiOiB7XG4gICAgICBcImltcG9ydFwiOiBcIi4vZGlzdC9zdHlsZS5jc3NcIixcbiAgICAgIFwicmVxdWlyZVwiOiBcIi4vZGlzdC9zdHlsZS5jc3NcIixcbiAgICAgIFwiZGVmYXVsdFwiOiBcIi4vZGlzdC9zdHlsZS5jc3NcIlxuICAgIH0sXG4gICAgXCIuL2tpdC5jc3NcIjoge1xuICAgICAgXCJpbXBvcnRcIjogXCIuL2Rpc3Qva2l0LmNzc1wiLFxuICAgICAgXCJyZXF1aXJlXCI6IFwiLi9kaXN0L2tpdC5jc3NcIixcbiAgICAgIFwiZGVmYXVsdFwiOiBcIi4vZGlzdC9raXQuY3NzXCJcbiAgICB9LFxuICAgIFwiLi9jb21wb25lbnRzLmNzc1wiOiB7XG4gICAgICBcImltcG9ydFwiOiBcIi4vZGlzdC9jb21wb25lbnRzLmNzc1wiLFxuICAgICAgXCJyZXF1aXJlXCI6IFwiLi9kaXN0L2NvbXBvbmVudHMuY3NzXCIsXG4gICAgICBcImRlZmF1bHRcIjogXCIuL2Rpc3QvY29tcG9uZW50cy5jc3NcIlxuICAgIH1cbiAgfSxcbiAgXCJhdXRob3JcIjogXCJcIixcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQGVzbGludC9qc1wiOiBcIl45LjEzLjBcIixcbiAgICBcIkB0eXBlcy9yZWFjdFwiOiBcIl4xOC4zLjEyXCIsXG4gICAgXCJAdHlwZXMvcmVhY3QtZG9tXCI6IFwiXjE4LjMuMVwiLFxuICAgIFwiQHZpdGVqcy9wbHVnaW4tcmVhY3RcIjogXCJeNC4zLjNcIixcbiAgICBcImF1dG9wcmVmaXhlclwiOiBcIl4xMC40LjIwXCIsXG4gICAgXCJlc2xpbnRcIjogXCJeOS4xMy4wXCIsXG4gICAgXCJlc2xpbnQtcGx1Z2luLXJlYWN0LWhvb2tzXCI6IFwiXjUuMC4wXCIsXG4gICAgXCJlc2xpbnQtcGx1Z2luLXJlYWN0LXJlZnJlc2hcIjogXCJeMC40LjE0XCIsXG4gICAgXCJnbG9iXCI6IFwiXjExLjAuMFwiLFxuICAgIFwiZ2xvYmFsc1wiOiBcIl4xNS4xMS4wXCIsXG4gICAgXCJwb3N0Y3NzXCI6IFwiXjguNC40OVwiLFxuICAgIFwicmVhY3RcIjogXCJeMTguMy4xXCIsXG4gICAgXCJyZWFjdC1kb21cIjogXCJeMTguMy4xXCIsXG4gICAgXCJyaW1yYWZcIjogXCJeNi4wLjFcIixcbiAgICBcInJvbGx1cC1wbHVnaW4tZHRzXCI6IFwiXjYuMS4xXCIsXG4gICAgXCJ0YWlsd2luZGNzc1wiOiBcIl4zLjQuMTVcIixcbiAgICBcInR5cGVzY3JpcHRcIjogXCJ+NS42LjJcIixcbiAgICBcInR5cGVzY3JpcHQtZXNsaW50XCI6IFwiXjguMTEuMFwiLFxuICAgIFwidml0ZVwiOiBcIl41LjQuMTBcIixcbiAgICBcInZpdGUtcGx1Z2luLWNzcy1pbmplY3RlZC1ieS1qc1wiOiBcIl4zLjUuMlwiLFxuICAgIFwidml0ZS1wbHVnaW4tZHRzXCI6IFwiXjQuMy4wXCIsXG4gICAgXCJ2aXRlLXRzY29uZmlnLXBhdGhzXCI6IFwiXjUuMS4zXCJcbiAgfSxcbiAgXCJwZWVyRGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcInJlYWN0XCI6IFwiXjE4XCIsXG4gICAgXCJyZWFjdC1kb21cIjogXCJeMThcIixcbiAgICBcInNvbm5lclwiOiBcIl4xLjcuMVwiXG4gIH0sXG4gIFwiZGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcIkAweHNlcXVlbmNlL2Rlc2lnbi1zeXN0ZW1cIjogXCJeMS44LjBcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1zZWxlY3RcIjogXCJeMi4xLjJcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC10b29sdGlwXCI6IFwiXjEuMS40XCIsXG4gICAgXCJAc3Znci9jbGlcIjogXCJeOC4xLjBcIixcbiAgICBcImJvaWxlcnBsYXRlLWRlc2lnbi1zeXN0ZW1cIjogXCJnaXRodWI6MHhzZXF1ZW5jZS1kZW1vcy9ib2lsZXJwbGF0ZS1kZXNpZ24tc3lzdGVtIzA3M2YxY2VcIixcbiAgICBcImNsc3hcIjogXCJeMi4xLjFcIixcbiAgICBcImZyYW1lci1tb3Rpb25cIjogXCJeMTEuMTYuMFwiLFxuICAgIFwiem9kXCI6IFwiXjMuMjMuOFwiXG4gIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBMlgsU0FBUyxvQkFBb0I7QUFDeFosT0FBTyxXQUFXO0FBRWxCLE9BQU8sU0FBUztBQUNoQixPQUFPLG1CQUFtQjs7O0FDNER4Qix1QkFBb0I7QUFBQSxFQUNsQixPQUFTO0FBQUEsRUFDVCxhQUFhO0FBQUEsRUFDYixRQUFVO0FBQ1o7OztBRDVERixJQUFPLHNCQUFRLGFBQWE7QUFBQSxFQUMxQixTQUFTO0FBQUEsSUFDUCxNQUFNO0FBQUEsSUFDTixjQUFjO0FBQUEsSUFDZCxJQUFJO0FBQUEsTUFDRixTQUFTLENBQUMsZ0JBQWdCLFNBQVMsb0JBQW9CLGVBQWU7QUFBQSxNQUN0RSxRQUFRO0FBQUEsSUFDVixDQUFDO0FBQUEsRUFDSDtBQUFBLEVBQ0EsT0FBTztBQUFBLElBQ0wsS0FBSztBQUFBLE1BQ0gsT0FBTztBQUFBLE1BQ1AsTUFBTTtBQUFBLE1BQ04sU0FBUyxDQUFDLE1BQU0sS0FBSztBQUFBLE1BQ3JCLFVBQVUsQ0FBQyxXQUFXLFNBQVMsTUFBTTtBQUFBLElBQ3ZDO0FBQUEsSUFDQSxlQUFlO0FBQUEsTUFDYixRQUFRO0FBQUEsUUFDTixLQUFLO0FBQUE7QUFBQSxNQUNQO0FBQUEsTUFDQSxVQUFVLE9BQU8sS0FBSyxnQkFBZ0I7QUFBQSxNQUN0QyxTQUFTLENBQUM7QUFBQSxJQUNaO0FBQUEsSUFDQSxPQUFPO0FBQUEsTUFDTCxTQUFTO0FBQUE7QUFBQSxJQUNYO0FBQUEsRUFDRjtBQUNGLENBQUM7IiwKICAibmFtZXMiOiBbXQp9Cg==
