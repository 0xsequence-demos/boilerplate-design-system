// vite.config.ts
import { defineConfig } from "file:///Users/matt/Uncredited/horizon/0xsequence/boilerplate-design-system/node_modules/.pnpm/vite@5.4.11/node_modules/vite/dist/node/index.js";
import react from "file:///Users/matt/Uncredited/horizon/0xsequence/boilerplate-design-system/node_modules/.pnpm/@vitejs+plugin-react@4.3.3_vite@5.4.11/node_modules/@vitejs/plugin-react/dist/index.mjs";
import dts from "file:///Users/matt/Uncredited/horizon/0xsequence/boilerplate-design-system/node_modules/.pnpm/vite-plugin-dts@4.3.0_rollup@4.27.3_typescript@5.6.3_vite@5.4.11/node_modules/vite-plugin-dts/dist/index.mjs";
import tsconfigPaths from "file:///Users/matt/Uncredited/horizon/0xsequence/boilerplate-design-system/node_modules/.pnpm/vite-tsconfig-paths@5.1.3_typescript@5.6.3_vite@5.4.11/node_modules/vite-tsconfig-paths/dist/index.js";

// package.json
var peerDependencies = {
  react: "^18",
  "react-dom": "^18",
  sonner: "^1.7.1"
};

// vite.config.ts
var vite_config_default = defineConfig({
  plugins: [
    react(),
    tsconfigPaths(),
    dts({
      exclude: ["node_modules", "tests", "**/*.stories.tsx", "**/*.test.tsx"],
      outDir: "dist"
    })
  ],
  build: {
    lib: {
      entry: "./src/index.ts",
      name: "boilerplate-design-system",
      formats: ["es", "umd"],
      fileName: (format) => `index.${format}.js`
    },
    rollupOptions: {
      output: {
        dir: "dist"
        // Output directory
      },
      external: Object.keys(peerDependencies),
      plugins: []
    },
    watch: {
      include: "src/**"
      // Watch for changes in the source directory
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1VzZXJzL21hdHQvVW5jcmVkaXRlZC9ob3Jpem9uLzB4c2VxdWVuY2UvYm9pbGVycGxhdGUtZGVzaWduLXN5c3RlbVwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiL1VzZXJzL21hdHQvVW5jcmVkaXRlZC9ob3Jpem9uLzB4c2VxdWVuY2UvYm9pbGVycGxhdGUtZGVzaWduLXN5c3RlbS92aXRlLmNvbmZpZy50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vVXNlcnMvbWF0dC9VbmNyZWRpdGVkL2hvcml6b24vMHhzZXF1ZW5jZS9ib2lsZXJwbGF0ZS1kZXNpZ24tc3lzdGVtL3ZpdGUuY29uZmlnLnRzXCI7aW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSBcInZpdGVcIjtcbmltcG9ydCByZWFjdCBmcm9tIFwiQHZpdGVqcy9wbHVnaW4tcmVhY3RcIjtcblxuaW1wb3J0IGR0cyBmcm9tIFwidml0ZS1wbHVnaW4tZHRzXCI7XG5pbXBvcnQgdHNjb25maWdQYXRocyBmcm9tIFwidml0ZS10c2NvbmZpZy1wYXRoc1wiO1xuaW1wb3J0IHsgcGVlckRlcGVuZGVuY2llcyB9IGZyb20gXCIuL3BhY2thZ2UuanNvblwiO1xuXG4vLyBodHRwczovL3ZpdGUuZGV2L2NvbmZpZy9cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XG4gIHBsdWdpbnM6IFtcbiAgICByZWFjdCgpLFxuICAgIHRzY29uZmlnUGF0aHMoKSxcbiAgICBkdHMoe1xuICAgICAgZXhjbHVkZTogW1wibm9kZV9tb2R1bGVzXCIsIFwidGVzdHNcIiwgXCIqKi8qLnN0b3JpZXMudHN4XCIsIFwiKiovKi50ZXN0LnRzeFwiXSxcbiAgICAgIG91dERpcjogXCJkaXN0XCIsXG4gICAgfSksXG4gIF0sXG4gIGJ1aWxkOiB7XG4gICAgbGliOiB7XG4gICAgICBlbnRyeTogXCIuL3NyYy9pbmRleC50c1wiLFxuICAgICAgbmFtZTogXCJib2lsZXJwbGF0ZS1kZXNpZ24tc3lzdGVtXCIsXG4gICAgICBmb3JtYXRzOiBbXCJlc1wiLCBcInVtZFwiXSxcbiAgICAgIGZpbGVOYW1lOiAoZm9ybWF0KSA9PiBgaW5kZXguJHtmb3JtYXR9LmpzYCxcbiAgICB9LFxuICAgIHJvbGx1cE9wdGlvbnM6IHtcbiAgICAgIG91dHB1dDoge1xuICAgICAgICBkaXI6IFwiZGlzdFwiLCAvLyBPdXRwdXQgZGlyZWN0b3J5XG4gICAgICB9LFxuICAgICAgZXh0ZXJuYWw6IE9iamVjdC5rZXlzKHBlZXJEZXBlbmRlbmNpZXMpLFxuICAgICAgcGx1Z2luczogW10sXG4gICAgfSxcbiAgICB3YXRjaDoge1xuICAgICAgaW5jbHVkZTogXCJzcmMvKipcIiwgLy8gV2F0Y2ggZm9yIGNoYW5nZXMgaW4gdGhlIHNvdXJjZSBkaXJlY3RvcnlcbiAgICB9LFxuICB9LFxufSk7XG4iLCAie1xuICBcIm5hbWVcIjogXCJib2lsZXJwbGF0ZS1kZXNpZ24tc3lzdGVtXCIsXG4gIFwicHJpdmF0ZVwiOiB0cnVlLFxuICBcInZlcnNpb25cIjogXCIwLjAuMFwiLFxuICBcInR5cGVcIjogXCJtb2R1bGVcIixcbiAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICBcInNjcmlwdHNcIjoge1xuICAgIFwiZGV2XCI6IFwidml0ZVwiLFxuICAgIFwiYnVpbGRcIjogXCJucG0gcnVuIGJ1aWxkOmxpYnJhcnkgJiYgbnBtIHJ1biBidWlsZDpjc3MgJiYgbnBtIHJ1biBidWlsZDp0YWlsd2luZC1wcmVzZXRcIixcbiAgICBcImJ1aWxkOmxpYnJhcnlcIjogXCJ2aXRlIGJ1aWxkXCIsXG4gICAgXCJidWlsZDpjc3NcIjogXCJjcHggJy4vc3JjLyoqLyouY3NzJyBkaXN0L3N0eWxlc1wiLFxuICAgIFwiYnVpbGQ6dGFpbHdpbmQtcHJlc2V0XCI6IFwiY3B4ICcuL3RhaWx3aW5kLmNvbmZpZy5qcycgZGlzdFwiLFxuICAgIFwibGludFwiOiBcImVzbGludCAuXCIsXG4gICAgXCJwcmV2aWV3XCI6IFwidml0ZSBwcmV2aWV3XCIsXG4gICAgXCJidWlsZC1zdmdcIjogXCJucHggQHN2Z3IvY2xpIC0tdHlwZXNjcmlwdCAtLW5vLWRpbWVuc2lvbnMgLS1zdmctcHJvcHMgcm9sZT1pbWcgLS1vdXQtZGlyIHNyYy9jb21wb25lbnRzL3N2ZyAtLSBzdmdcIlxuICB9LFxuICBcIm1haW5cIjogXCJkaXN0L2luZGV4LnVtZC5qc1wiLFxuICBcIm1vZHVsZVwiOiBcImRpc3QvaW5kZXguZXMuanNcIixcbiAgXCJ0eXBlc1wiOiBcImRpc3QvaW5kZXguZC50c1wiLFxuICBcImV4cG9ydHNcIjoge1xuICAgIFwiLlwiOiB7XG4gICAgICBcImltcG9ydFwiOiBcIi4vZGlzdC9pbmRleC5lcy5qc1wiLFxuICAgICAgXCJyZXF1aXJlXCI6IFwiLi9kaXN0L2luZGV4LnVtZC5qc1wiLFxuICAgICAgXCJkZWZhdWx0XCI6IFwiLi9kaXN0L2luZGV4LmVzLmpzXCIsXG4gICAgICBcInR5cGVzXCI6IFwiLi9kaXN0L2luZGV4LmQudHNcIlxuICAgIH0sXG4gICAgXCIuL3N0eWxlcy5jc3NcIjoge1xuICAgICAgXCJpbXBvcnRcIjogXCIuL2Rpc3Qvc3R5bGUuY3NzXCIsXG4gICAgICBcInJlcXVpcmVcIjogXCIuL2Rpc3Qvc3R5bGUuY3NzXCIsXG4gICAgICBcImRlZmF1bHRcIjogXCIuL2Rpc3Qvc3R5bGUuY3NzXCJcbiAgICB9LFxuICAgIFwiLi9zdHlsZXMvKlwiOiB7XG4gICAgICBcImltcG9ydFwiOiBcIi4vZGlzdC9zdHlsZXMvKlwiLFxuICAgICAgXCJyZXF1aXJlXCI6IFwiLi9kaXN0L3N0eWxlcy8qXCIsXG4gICAgICBcImRlZmF1bHRcIjogXCIuL2Rpc3Qvc3R5bGVzLypcIlxuICAgIH1cbiAgfSxcbiAgXCJhdXRob3JcIjogXCJcIixcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQGVzbGludC9qc1wiOiBcIl45LjEzLjBcIixcbiAgICBcIkB0eXBlcy9yZWFjdFwiOiBcIl4xOC4zLjEyXCIsXG4gICAgXCJAdHlwZXMvcmVhY3QtZG9tXCI6IFwiXjE4LjMuMVwiLFxuICAgIFwiQHZpdGVqcy9wbHVnaW4tcmVhY3RcIjogXCJeNC4zLjNcIixcbiAgICBcImF1dG9wcmVmaXhlclwiOiBcIl4xMC40LjIwXCIsXG4gICAgXCJjcHhcIjogXCJeMS41LjBcIixcbiAgICBcImVzbGludFwiOiBcIl45LjEzLjBcIixcbiAgICBcImVzbGludC1wbHVnaW4tcmVhY3QtaG9va3NcIjogXCJeNS4wLjBcIixcbiAgICBcImVzbGludC1wbHVnaW4tcmVhY3QtcmVmcmVzaFwiOiBcIl4wLjQuMTRcIixcbiAgICBcImdsb2JcIjogXCJeMTEuMC4wXCIsXG4gICAgXCJnbG9iYWxzXCI6IFwiXjE1LjExLjBcIixcbiAgICBcInBvc3Rjc3NcIjogXCJeOC40LjQ5XCIsXG4gICAgXCJyZWFjdFwiOiBcIl4xOC4zLjFcIixcbiAgICBcInJlYWN0LWRvbVwiOiBcIl4xOC4zLjFcIixcbiAgICBcInJpbXJhZlwiOiBcIl42LjAuMVwiLFxuICAgIFwicm9sbHVwLXBsdWdpbi1kdHNcIjogXCJeNi4xLjFcIixcbiAgICBcInRhaWx3aW5kY3NzXCI6IFwiXjMuNC4xNVwiLFxuICAgIFwidHlwZXNjcmlwdFwiOiBcIn41LjYuMlwiLFxuICAgIFwidHlwZXNjcmlwdC1lc2xpbnRcIjogXCJeOC4xMS4wXCIsXG4gICAgXCJ2aXRlXCI6IFwiXjUuNC4xMFwiLFxuICAgIFwidml0ZS1wbHVnaW4tY3NzLWluamVjdGVkLWJ5LWpzXCI6IFwiXjMuNS4yXCIsXG4gICAgXCJ2aXRlLXBsdWdpbi1kdHNcIjogXCJeNC4zLjBcIixcbiAgICBcInZpdGUtdHNjb25maWctcGF0aHNcIjogXCJeNS4xLjNcIlxuICB9LFxuICBcInBlZXJEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwicmVhY3RcIjogXCJeMThcIixcbiAgICBcInJlYWN0LWRvbVwiOiBcIl4xOFwiLFxuICAgIFwic29ubmVyXCI6IFwiXjEuNy4xXCJcbiAgfSxcbiAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQDB4c2VxdWVuY2UvZGVzaWduLXN5c3RlbVwiOiBcIl4xLjguMFwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LXNlbGVjdFwiOiBcIl4yLjEuMlwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LXRvb2x0aXBcIjogXCJeMS4xLjRcIixcbiAgICBcIkBzdmdyL2NsaVwiOiBcIl44LjEuMFwiLFxuICAgIFwiY2xzeFwiOiBcIl4yLjEuMVwiLFxuICAgIFwiZnJhbWVyLW1vdGlvblwiOiBcIl4xMS4xNi4wXCIsXG4gICAgXCJ6b2RcIjogXCJeMy4yMy44XCJcbiAgfVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUEyWCxTQUFTLG9CQUFvQjtBQUN4WixPQUFPLFdBQVc7QUFFbEIsT0FBTyxTQUFTO0FBQ2hCLE9BQU8sbUJBQW1COzs7QUMyRHhCLHVCQUFvQjtBQUFBLEVBQ2xCLE9BQVM7QUFBQSxFQUNULGFBQWE7QUFBQSxFQUNiLFFBQVU7QUFDWjs7O0FEM0RGLElBQU8sc0JBQVEsYUFBYTtBQUFBLEVBQzFCLFNBQVM7QUFBQSxJQUNQLE1BQU07QUFBQSxJQUNOLGNBQWM7QUFBQSxJQUNkLElBQUk7QUFBQSxNQUNGLFNBQVMsQ0FBQyxnQkFBZ0IsU0FBUyxvQkFBb0IsZUFBZTtBQUFBLE1BQ3RFLFFBQVE7QUFBQSxJQUNWLENBQUM7QUFBQSxFQUNIO0FBQUEsRUFDQSxPQUFPO0FBQUEsSUFDTCxLQUFLO0FBQUEsTUFDSCxPQUFPO0FBQUEsTUFDUCxNQUFNO0FBQUEsTUFDTixTQUFTLENBQUMsTUFBTSxLQUFLO0FBQUEsTUFDckIsVUFBVSxDQUFDLFdBQVcsU0FBUyxNQUFNO0FBQUEsSUFDdkM7QUFBQSxJQUNBLGVBQWU7QUFBQSxNQUNiLFFBQVE7QUFBQSxRQUNOLEtBQUs7QUFBQTtBQUFBLE1BQ1A7QUFBQSxNQUNBLFVBQVUsT0FBTyxLQUFLLGdCQUFnQjtBQUFBLE1BQ3RDLFNBQVMsQ0FBQztBQUFBLElBQ1o7QUFBQSxJQUNBLE9BQU87QUFBQSxNQUNMLFNBQVM7QUFBQTtBQUFBLElBQ1g7QUFBQSxFQUNGO0FBQ0YsQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
